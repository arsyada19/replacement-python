#import library yang dibutuhkan
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report

# reading the value from the csv file.
df = pd.read_csv('diabetes.csv')
df.head()

#checking the missing value
df.isna().sum()

#defenisikan variabel x dan y nya

x= df.iloc[:, [0,1,2,3,4,5,6,7]].values #data/ informasi untuk memprediksi apakah sesorang terindikasi diabetes atau tidak
y= df.iloc[:, [8]].values  #yang ingin kita prediksi

#membagi data menjadi data training (75%) dan data testing(25%)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0) #75% dari data jadi data training

#data-data yang ada diatur kembali skalanya
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)      

from sklearn.linear_model import LogisticRegression #nama modelnya
classifier = LogisticRegression(random_state = 0)  #panggil modelnya
classifier.fit(x_train, y_train) #fitting model ML nya

y_pred = classifier.predict(x_test) #predisksi model

#prediksi nilai tertentu 

prediksi = classifier.predict([[6,148,72,35,0,55.6,0.627,50]])

print("Apakah seseorang akan terindikasi Diabetes ? (1 = ya, 0 = tidak) :", prediksi)

#mencari nilai akurasi
from sklearn.metrics import confusion_matrix, accuracy_score
accuracy_score(y_test, y_pred) 

#mencari nilai metric yang lebih lengkap
print("Metric Performa Machine Learning")
print(classification_report(y_test, y_pred))

cf_matrix = confusion_matrix(y_pred, y_test)

sns.heatmap(cf_matrix, annot=True, cmap='Blues')

from sklearn.neighbors import KNeighborsClassifier
model_classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
model_classifier.fit(x_train, y_train)

y_pred_2 = model_classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
accuracy_score(y_test, y_pred_2)  

from sklearn.ensemble import RandomForestClassifier
classifier_forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier_forest.fit(x_train, y_train)

y_predict_3= classifier_forest.predict(x_test)

accuracy_score(y_test, y_predict_3)

from sklearn.svm import SVC
classifier_svc = SVC(kernel = 'linear', random_state = 0)
classifier_svc.fit(x_train, y_train)

y_pred_4 = classifier_svc.predict(x_test)

accuracy_score(y_test, y_pred_4)

from sklearn.svm import SVC
classifier_kernel = SVC(kernel = 'rbf', random_state = 0)
classifier_kernel.fit(x_train, y_train)

y_pred_5 = classifier_kernel.predict(x_test)

accuracy_score(y_test, y_pred_5)

#ngoding, database, matematika, robotik, statistik => teknik informatika / sistem komputer 

#ngoding robotik, arduino/esp8266/esp32, c++, =>microcontroller 

#sistem informasi => belajar bisnis, IT, sedikit ngoding
